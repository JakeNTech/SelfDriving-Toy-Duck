 # HMTL Fake Code:
	<html>
	<heading> Self Driving Duck <end of heading>
	<video stream>
	video stream = from camera on pi
	<end of video stream>
	<break>
	<button><when pressed = SelfDrive()> Self-Drive <end of button>
	<button><when pressed = DuckUp()> up <end of button>
	<break>
	<button><when pressed = DuckLeft()> left <end of button>
	<mini break> 
	<button><when pressed = DuckRight()> right <end of button>
	<break>
	<button><when pressed = DuckDown()> down <end of button>

	<java>
	javaFile = open("java.js")
	<end java>
	<end html>
----------------------------------------------------------------
# Java Plan Code
	get HTML Elements
	if DuckUp():
		output("You have sleected up")
		ToHat(Up,TimeButtonWasHeldFor)
	if DuckDown():
		output("You have sleected down")
		ToHat(down,TimeButtonWasHeldFor)
	if DuckLeft():
		output("You have sleected left")
		ToHat(left,TimeButtonWasHeldFor)
	if DuckRight():
		output("You have sleected right")
		ToHat(right,TimeButtonWasHeldFor)
	From Server Get Video Stream:
		connect to Video
		Play in browser
	function(SelfDrive):
		if SelfDriveButton = pressed:
			button_text="quack"
			boradcast = "Self drive" to Python
----------------------------------------------------------------
# Main python Code
	Import all the other partial files

	arguments = CollectArguments(Arguments.train script)

	perameaters = CollectPerameaters(Perms)

	Start Hosting Web serever

	print("ready to run")
	stream video
----------------------------------------------------------------
# WebServer Script
	set IP = 192.168.0.23 (Used as I have that assided to the pi already)
	open files = "./WebScripts/MainPage.html"
	if user.conect == True;
		push files to browser
		if output is being given:
			passOutput to Car Brain
----------------------------------------------------------------
#Camera script
	import pi_camera
	picamera.start()
	picamera.sleep(1Second)
	if training == True:
		convert stream to stillimage
		save as "./TraningImages/"
	else:
		pass stream to main.py
----------------------------------------------------------------
# Duckhead
	import threading
	import time
	inport AI_Module
	function predictions(ModelFile,VideoStram);
		time = currenttime
		result = useModel(videoStream) to decide on next move
		log = Utilitys.print(prediction)
		direction = array []
		if move == 0:
			direction = "forward"
		elseif move == 1:
			direction = "Right","Forward"
		elseif move == 2:
			direction = "Left","Forward"
	function selfDriving(AnObject):
		thread = start new tread
		image = self.duck.eye.last_image
		direction = pass_to_Model_file.getDirection(using image)
		if direction = new_instruction:
			stop current_movement
			start new_direction
	duck.stop()
----------------------------------------------------------------
#SelfDriving sctipt
	import modules

	funciton self_drive(self):
		open DuckBrain import selfDriving
		selfDriving(self)
	function speed(self,speed):
		self.speed.ChangeSpeed(speed)
	function stop(self,directions):
		GPIO.output = FALSE
	function move(self,direction):
		if directions != currentdirection:
			s = integer(defalutspeed*2)
		else:
			speed = defult
		for direction:
			GPIO.output(direction)
	funciton stop(self):
		print("stopping")
		GPIO = False